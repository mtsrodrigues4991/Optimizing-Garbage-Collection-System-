/*
Install Node
Install npm

NodeJS modules to be installed
- npm install fs --save
- npm install readline --save
- npm install request --save

*/

// Setup for file to be red and sent to Dashboard
// **********************************************************************************
// **********************************************************************************
var csv_path = "/home/caninos/Desktop/smart.csv";
var csv_source_filename = "smart.csv"; // file generated by Lora
// **********************************************************************************
// **********************************************************************************

var fs = require('fs');
var readline = require('readline');
var request = require('request');

function base64ToHex(str) {
    const raw = atob(str);
    let result = '';
    for (let i = 0; i < raw.length; i++) {
      const hex = raw.charCodeAt(i).toString(16);
      result += (hex.length === 2 ? hex : '0' + hex);
    }
    return result.toUpperCase();
}

function decodeLoraPayload(base64Payload) {
  // NWKSKEY[16] = { 0x0B, 0xDD, 0x76, 0x43, 0xAE, 0xD8, 0xF7, 0x1E, 0x5A, 0xC8, 0xB1, 0x0C, 0xD3, 0x37, 0xAE, 0x80 }
  // APPSKEY[16] = { 0xAF, 0x8D, 0x64, 0xE3, 0x88, 0xD4, 0xEE, 0x3C, 0x3B, 0xCB, 0x61, 0xA1, 0xE0, 0xF2, 0xDF, 0x1E }
  var nwkSKey = "0BDD7643AED8F71E5AC8B10CD337AE80";
  var appSKey = "AF8D64E388D4EE3C3BCB61A1E0F2DF1E";

  const lora_packet = require("lora-packet");
  var payload = base64ToHex(base64Payload);

  // decode a packet
  const packet = lora_packet.fromWire(Buffer.from(payload, "hex"));

  // check MIC
  const NwkSKey = Buffer.from(nwkSKey, "hex");
  // decrypt payload
  const AppSKey = Buffer.from(appSKey, "hex");

  return (lora_packet.decrypt(packet, AppSKey, NwkSKey).toString());
}

//var base64Payload = "QHO1DSaABgABe9FPXjhLmGHW"; // Hex 40 33 32 31 30 80 02 00 01 64 2e a2 e2 a7 79 10 75 e4 75
//console.log(decodeLoraPayload(base64Payload));

// Other settings...
var csv_sourceRenamed_filename = "sourceRenamed.csv"; // temporary file
var csv_toBeSent_filename = "toBeSent.csv"; // file created to be handled by this code (all lines from csv_source_filename will be moved and appended to it)
var csv_sentResult_filename = "sentResult.csv"; // temporary CSV file with sent results (at the end it will be deleted and renamed to "toBeSent.csv")
var csv_hasHeader = false;
var csv_delimiter = ",";
var csv_log_filename = "service.log";
var csv_source_lines;
// ----------------------------------------------

// Setup for Dashboard's API
var api_url = <"API LINK">;
var user = <"API user">;
var pwd = "<"API pwd">;
var headers = {"Content-Type": "application/json", "Authorization": "Basic " + new Buffer.from(user + ":" + pwd).toString("base64")};
// -------------------------

// deleting temporary old SourceRenamed CSV file
console.log('1. Deleting temporary old SourceRenamed CSV file...')
fs.stat(csv_path + csv_sourceRenamed_filename, function (err, stats) {
  if (err) {
    //console.warn('>>> WARNING: ' + err); // file doens not exist; delete unnecessary
  } else {
    fs.unlink(csv_path + csv_sourceRenamed_filename, function(err2) {
      if (err2) return console.log('>>> error deleting temporary old SourceRenamed file: ' + err2);
    });
  }    
});

// renaming the temporary SentResult CSV file to ToBeSent (SentResult's not sent remaining content will be enqueued for next time)
console.log('2. Renaming Source file to temporary SourceRenamed file...')
fs.renameSync(csv_path + csv_source_filename, csv_path + csv_sourceRenamed_filename, function(err) {
  if (err){
		return console.log('>>> error renaming Source file to temporary SourceRenamed file: ' + err)
  }
});

// extracting CSV file's lines
console.log('3. Reading SourceRenamed CSV file...');
try {
  var csv_source_lines = fs.readFileSync(csv_path + csv_sourceRenamed_filename, 'utf8');
} catch (err) {
  return console.log('>>> error reading SourceRenamed CSV file: ' + err);
}

//fs.readFile(csv_path + csv_sourceRenamed_filename,'utf8', function(err, data) {
//  if (err) {
//		return console.log('>>> error reading SourceRenamed CSV file: ' + err)
//	}
//  csv_source_lines = data.toString();
//});

// appending all CSV content to ToBeSent File
console.log('4. Appending content to ToBeSent CSV file...');
fs.writeFileSync(csv_path + csv_toBeSent_filename, csv_source_lines, {enconding:'utf-8',flag: 'a'}, function(err) {
  if(err){
		return console.log('>>> error appending content to ToBeSent CSV file: ' + err)
  }
});

// deleting temporary old SentResult CSV file
console.log('5. Deleting temporary SentResult CSV file...')
fs.stat(csv_path + csv_sentResult_filename, function (err, stats) {
  if (err) {
    //console.warn('>>> WARNING: ' + err); // file doens not exist; delete unnecessary
  } else {
    fs.unlinkSync(csv_path + csv_sentResult_filename, function(err2) {
      if (err2) return console.log('>>> error deleting temporary old SentResult file: ' + err)
    });
  }    
});

// handling each line of the ToBeSent CSV file
var binMessage;
var binAddress = '';
var binPayload = '';
var binData;
var binCapacity = 0;
var binBattery = 0;
var apiMessage;

var date_ob;
var date;
var month;
var year;
var hours;
var minutes;
var seconds;
var curDatetime;

var line_count = 0;
//var rl = readline.createInterface({
//  input : fs.createReadStream(csv_path + csv_toBeSent_filename),
//  output : process.stdout,
//  terminal: false
//});

//var startReadline = async() => {
//  for await (var text of rl) {

  //rl.on('line', function (text) {

console.log('6. Posting to Dashboard API...')
var lines = fs.readFileSync(csv_path + csv_toBeSent_filename, 'utf-8').split('\n');
lines.forEach((value, index, array) => {

  if (line_count == 0 && csv_hasHeader == true) {
    fs.writeFileSync(csv_path + csv_sentResult_filename, value + '\n', {enconding:'utf-8',flag: 'w'}, function(err) {
      if(err){
        return console.log('>>> error appending header line to SentResult CSV file: ' + err)
      }
    });
  } else {

    binMessage = value.split(',');

    if (binMessage.length == 2) {
      line_count++;

      binAddress = binMessage[0].trim();
      binPayload = binMessage[1].trim();
      binPayload = decodeLoraPayload(binPayload);
      binData = binPayload.split('|');
      binCapacity = parseInt(binData[0]);
      binBattery = parseInt(binData[1]);
      
      apiMessage = {
        'binIdentity': binAddress,
        'fillLevel': binCapacity,
        'powerLevel': binBattery
      };

      console.log('- sending [' + value + ']...');
      request.post({
          "headers": headers,
          "url": api_url,
          "body": JSON.stringify(apiMessage)
      }, (err, response, body) => {
          if (response.statusCode !== 200 || err) {
            console.log('>>> error sending content [' + value + ']: ' + (response.statusCode || err))
            // when error, appending to SentResult CSV file for later sending
            fs.writeFileSync(csv_path + csv_sentResult_filename, value + '\n', {enconding:'utf-8',flag: 'a'}, function(err2) {
              if (err2){
                return console.log('>>> error appending content to SentResult CSV file: ' + err2);
              }
            });
          }

          date_ob = new Date();
          // current date
          // adjust 0 before single digit date
          date = ("0" + date_ob.getDate()).slice(-2);
          // current month
          month = ("0" + (date_ob.getMonth() + 1)).slice(-2);
          // current year
          year = date_ob.getFullYear();
          // current hours
          hours = date_ob.getHours();
          // current minutes
          minutes = date_ob.getMinutes();
          // current seconds
          seconds = date_ob.getSeconds();
          curDatetime = year + '-' + month + '-' + date + ' ' + hours + ':' + minutes + ':' + seconds;
          
          fs.writeFile(csv_path + csv_log_filename, curDatetime + ' - ' + response.statusCode + ': ' + value + '\n', {enconding:'utf-8',flag: 'a'}, function(err2) {
            if (err2){
              return console.log('>>> error appending content to Log file: ' + err2);
            }
          });
      
      });
    }

  }

});

// deleting ToBeSent CSV file
console.log('7. Deleting old ToBeSent CSV file...')
fs.stat(csv_path + csv_toBeSent_filename, function (err, stats) {
  if (err) {
    //console.warn('>>> WARNING: ' + err); // file doens not exist; delete unnecessary
  } else {
    fs.unlinkSync(csv_path + csv_toBeSent_filename, function(err2) {
      if (err2) return console.log('>>> error deleting old ToBeSent file: ' + err)
    });
  }    
});

// being sure that SentResult file has been closed...
setTimeout(() => {
  // renaming the temporary SentResult CSV file to ToBeSent (SentResult's not sent remaining content will be enqueued for next time)
  fs.stat(csv_path + csv_sentResult_filename, function (err, stats) {
    if (err) {
      //console.warn('>>> WARNING: ' + err); // file doens not exist; delete unnecessary
    } else {
      fs.rename(csv_path + csv_sentResult_filename, csv_path + csv_toBeSent_filename, function(err) {
        if (err){
          return console.log('>>> error renaming SentResult to ToBeSent CSV file: ' + err)
        }
      });
    }
  });
}, (line_count * 1000));

console.log(`Processed ${line_count} lines.`);